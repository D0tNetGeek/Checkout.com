/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.14.0 (NJsonSchema v9.13.18.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class ApiClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    get(cartId: string, version: string): Promise<Cart> {
        let url_ = this.baseUrl + "/api/v{version}/Cart/{cartId}";
        if (cartId === undefined || cartId === null)
            throw new Error("The parameter 'cartId' must be defined.");
        url_ = url_.replace("{cartId}", encodeURIComponent("" + cartId)); 
        if (version === undefined || version === null)
            throw new Error("The parameter 'version' must be defined.");
        url_ = url_.replace("{version}", encodeURIComponent("" + version)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<Cart> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Cart.fromJS(resultData200) : new Cart();
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Cart>(<any>null);
    }

    /**
     * @return Success
     */
    remove(cartId: string, version: string): Promise<void> {
        let url_ = this.baseUrl + "/api/v{version}/Cart/{cartId}";
        if (cartId === undefined || cartId === null)
            throw new Error("The parameter 'cartId' must be defined.");
        url_ = url_.replace("{cartId}", encodeURIComponent("" + cartId)); 
        if (version === undefined || version === null)
            throw new Error("The parameter 'version' must be defined.");
        url_ = url_.replace("{version}", encodeURIComponent("" + version)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRemove(_response);
        });
    }

    protected processRemove(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param cartId (optional) 
     * @return Success
     */
    save(cartId: string | null | undefined, countryId: number, productId: number, qty: number, version: string): Promise<CartProduct> {
        let url_ = this.baseUrl + "/api/v{version}/Cart?";
        if (version === undefined || version === null)
            throw new Error("The parameter 'version' must be defined.");
        url_ = url_.replace("{version}", encodeURIComponent("" + version)); 
        if (cartId !== undefined)
            url_ += "CartId=" + encodeURIComponent("" + cartId) + "&"; 
        if (countryId === undefined || countryId === null)
            throw new Error("The parameter 'countryId' must be defined and cannot be null.");
        else
            url_ += "CountryId=" + encodeURIComponent("" + countryId) + "&"; 
        if (productId === undefined || productId === null)
            throw new Error("The parameter 'productId' must be defined and cannot be null.");
        else
            url_ += "ProductId=" + encodeURIComponent("" + productId) + "&"; 
        if (qty === undefined || qty === null)
            throw new Error("The parameter 'qty' must be defined and cannot be null.");
        else
            url_ += "Qty=" + encodeURIComponent("" + qty) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "PUT",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSave(_response);
        });
    }

    protected processSave(response: Response): Promise<CartProduct> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? CartProduct.fromJS(resultData200) : new CartProduct();
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CartProduct>(<any>null);
    }

    /**
     * @return Success
     */
    remove2(cartId: string, productId: number, version: string): Promise<void> {
        let url_ = this.baseUrl + "/api/v{version}/Cart/{cartId}/{productId}";
        if (cartId === undefined || cartId === null)
            throw new Error("The parameter 'cartId' must be defined.");
        url_ = url_.replace("{cartId}", encodeURIComponent("" + cartId)); 
        if (productId === undefined || productId === null)
            throw new Error("The parameter 'productId' must be defined.");
        url_ = url_.replace("{productId}", encodeURIComponent("" + productId)); 
        if (version === undefined || version === null)
            throw new Error("The parameter 'version' must be defined.");
        url_ = url_.replace("{version}", encodeURIComponent("" + version)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRemove2(_response);
        });
    }

    protected processRemove2(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    getEnumerable(version: string): Promise<Country[]> {
        let url_ = this.baseUrl + "/api/v{version}/Countries";
        if (version === undefined || version === null)
            throw new Error("The parameter 'version' must be defined.");
        url_ = url_.replace("{version}", encodeURIComponent("" + version)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetEnumerable(_response);
        });
    }

    protected processGetEnumerable(response: Response): Promise<Country[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Country.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Country[]>(<any>null);
    }

    /**
     * @return Success
     */
    getTask(countryId: number, version: string): Promise<Country> {
        let url_ = this.baseUrl + "/api/v{version}/Countries/{countryId}";
        if (countryId === undefined || countryId === null)
            throw new Error("The parameter 'countryId' must be defined.");
        url_ = url_.replace("{countryId}", encodeURIComponent("" + countryId)); 
        if (version === undefined || version === null)
            throw new Error("The parameter 'version' must be defined.");
        url_ = url_.replace("{version}", encodeURIComponent("" + version)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetTask(_response);
        });
    }

    protected processGetTask(response: Response): Promise<Country> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Country.fromJS(resultData200) : new Country();
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Country>(<any>null);
    }

    /**
     * @param countryId (optional) 
     * @return Success
     */
    getAll(countryId: number | null | undefined, version: string): Promise<Product[]> {
        let url_ = this.baseUrl + "/api/v{version}/Products?";
        if (version === undefined || version === null)
            throw new Error("The parameter 'version' must be defined.");
        url_ = url_.replace("{version}", encodeURIComponent("" + version)); 
        if (countryId !== undefined)
            url_ += "countryId=" + encodeURIComponent("" + countryId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: Response): Promise<Product[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Product.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Product[]>(<any>null);
    }

    /**
     * @return Success
     */
    getProduct(productId: number, version: string): Promise<Product> {
        let url_ = this.baseUrl + "/api/v{version}/Products/{productId}";
        if (productId === undefined || productId === null)
            throw new Error("The parameter 'productId' must be defined.");
        url_ = url_.replace("{productId}", encodeURIComponent("" + productId)); 
        if (version === undefined || version === null)
            throw new Error("The parameter 'version' must be defined.");
        url_ = url_.replace("{version}", encodeURIComponent("" + version)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetProduct(_response);
        });
    }

    protected processGetProduct(response: Response): Promise<Product> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Product.fromJS(resultData200) : new Product();
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Product>(<any>null);
    }
}

export class Cart implements ICart {
    cartId?: string | undefined;
    countryId?: number | undefined;
    countryIsoCode?: string | undefined;
    items?: CartProduct[] | undefined;
    totalNetPrice?: number | undefined;
    totalNetPriceFormatted?: string | undefined;
    totalTax?: number | undefined;
    totalGrossPrice?: number | undefined;
    totalGrossPriceFormatted?: string | undefined;

    constructor(data?: ICart) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.cartId = data["cartId"];
            this.countryId = data["countryId"];
            this.countryIsoCode = data["countryIsoCode"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(CartProduct.fromJS(item));
            }
            this.totalNetPrice = data["totalNetPrice"];
            this.totalNetPriceFormatted = data["totalNetPriceFormatted"];
            this.totalTax = data["totalTax"];
            this.totalGrossPrice = data["totalGrossPrice"];
            this.totalGrossPriceFormatted = data["totalGrossPriceFormatted"];
        }
    }

    static fromJS(data: any): Cart {
        data = typeof data === 'object' ? data : {};
        let result = new Cart();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cartId"] = this.cartId;
        data["countryId"] = this.countryId;
        data["countryIsoCode"] = this.countryIsoCode;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalNetPrice"] = this.totalNetPrice;
        data["totalNetPriceFormatted"] = this.totalNetPriceFormatted;
        data["totalTax"] = this.totalTax;
        data["totalGrossPrice"] = this.totalGrossPrice;
        data["totalGrossPriceFormatted"] = this.totalGrossPriceFormatted;
        return data; 
    }
}

export interface ICart {
    cartId?: string | undefined;
    countryId?: number | undefined;
    countryIsoCode?: string | undefined;
    items?: CartProduct[] | undefined;
    totalNetPrice?: number | undefined;
    totalNetPriceFormatted?: string | undefined;
    totalTax?: number | undefined;
    totalGrossPrice?: number | undefined;
    totalGrossPriceFormatted?: string | undefined;
}

export class CartProduct implements ICartProduct {
    productName?: string | undefined;
    productCode?: string | undefined;
    countryIsoCode?: string | undefined;
    netPrice?: number | undefined;
    totalNetPrice?: number | undefined;
    totalNetPriceFormatted?: string | undefined;
    taxAmount?: number | undefined;
    totalTax?: number | undefined;
    taxAmountFormatted?: string | undefined;
    totalGrossPrice?: number | undefined;
    totalGrossPriceFormatted?: string | undefined;
    cartId?: string | undefined;
    countryId!: number;
    productId!: number;
    qty!: number;

    constructor(data?: ICartProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.productName = data["productName"];
            this.productCode = data["productCode"];
            this.countryIsoCode = data["countryIsoCode"];
            this.netPrice = data["netPrice"];
            this.totalNetPrice = data["totalNetPrice"];
            this.totalNetPriceFormatted = data["totalNetPriceFormatted"];
            this.taxAmount = data["taxAmount"];
            this.totalTax = data["totalTax"];
            this.taxAmountFormatted = data["taxAmountFormatted"];
            this.totalGrossPrice = data["totalGrossPrice"];
            this.totalGrossPriceFormatted = data["totalGrossPriceFormatted"];
            this.cartId = data["cartId"];
            this.countryId = data["countryId"];
            this.productId = data["productId"];
            this.qty = data["qty"];
        }
    }

    static fromJS(data: any): CartProduct {
        data = typeof data === 'object' ? data : {};
        let result = new CartProduct();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productName"] = this.productName;
        data["productCode"] = this.productCode;
        data["countryIsoCode"] = this.countryIsoCode;
        data["netPrice"] = this.netPrice;
        data["totalNetPrice"] = this.totalNetPrice;
        data["totalNetPriceFormatted"] = this.totalNetPriceFormatted;
        data["taxAmount"] = this.taxAmount;
        data["totalTax"] = this.totalTax;
        data["taxAmountFormatted"] = this.taxAmountFormatted;
        data["totalGrossPrice"] = this.totalGrossPrice;
        data["totalGrossPriceFormatted"] = this.totalGrossPriceFormatted;
        data["cartId"] = this.cartId;
        data["countryId"] = this.countryId;
        data["productId"] = this.productId;
        data["qty"] = this.qty;
        return data; 
    }
}

export interface ICartProduct {
    productName?: string | undefined;
    productCode?: string | undefined;
    countryIsoCode?: string | undefined;
    netPrice?: number | undefined;
    totalNetPrice?: number | undefined;
    totalNetPriceFormatted?: string | undefined;
    taxAmount?: number | undefined;
    totalTax?: number | undefined;
    taxAmountFormatted?: string | undefined;
    totalGrossPrice?: number | undefined;
    totalGrossPriceFormatted?: string | undefined;
    cartId?: string | undefined;
    countryId: number;
    productId: number;
    qty: number;
}

export class Country implements ICountry {
    name!: string;
    isoCode!: string;
    currencySymbol?: string | undefined;
    tax!: number;
    taxFormatted?: string | undefined;
    isDefault?: boolean | undefined;
    isActive?: boolean | undefined;
    id!: number;

    constructor(data?: ICountry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.isoCode = data["isoCode"];
            this.currencySymbol = data["currencySymbol"];
            this.tax = data["tax"];
            this.taxFormatted = data["taxFormatted"];
            this.isDefault = data["isDefault"];
            this.isActive = data["isActive"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): Country {
        data = typeof data === 'object' ? data : {};
        let result = new Country();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["isoCode"] = this.isoCode;
        data["currencySymbol"] = this.currencySymbol;
        data["tax"] = this.tax;
        data["taxFormatted"] = this.taxFormatted;
        data["isDefault"] = this.isDefault;
        data["isActive"] = this.isActive;
        data["id"] = this.id;
        return data; 
    }
}

export interface ICountry {
    name: string;
    isoCode: string;
    currencySymbol?: string | undefined;
    tax: number;
    taxFormatted?: string | undefined;
    isDefault?: boolean | undefined;
    isActive?: boolean | undefined;
    id: number;
}

export class Product implements IProduct {
    code!: string;
    shortDescription!: string;
    netPrice!: number;
    netPriceFormatted?: string | undefined;
    country!: Country;
    taxAmount?: number | undefined;
    taxAmountFormatted?: string | undefined;
    id!: number;
    name?: string | undefined;

    constructor(data?: IProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.country = new Country();
        }
    }

    init(data?: any) {
        if (data) {
            this.code = data["code"];
            this.shortDescription = data["shortDescription"];
            this.netPrice = data["netPrice"];
            this.netPriceFormatted = data["netPriceFormatted"];
            this.country = data["country"] ? Country.fromJS(data["country"]) : new Country();
            this.taxAmount = data["taxAmount"];
            this.taxAmountFormatted = data["taxAmountFormatted"];
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): Product {
        data = typeof data === 'object' ? data : {};
        let result = new Product();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["shortDescription"] = this.shortDescription;
        data["netPrice"] = this.netPrice;
        data["netPriceFormatted"] = this.netPriceFormatted;
        data["country"] = this.country ? this.country.toJSON() : <any>undefined;
        data["taxAmount"] = this.taxAmount;
        data["taxAmountFormatted"] = this.taxAmountFormatted;
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IProduct {
    code: string;
    shortDescription: string;
    netPrice: number;
    netPriceFormatted?: string | undefined;
    country: Country;
    taxAmount?: number | undefined;
    taxAmountFormatted?: string | undefined;
    id: number;
    name?: string | undefined;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if(result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}